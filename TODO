This is just a list of TODO items

- Fix the Singleton mess. Ran into issues with the old Singleton class when things weren't synching across different threads. I find this hard to believe, but switched to the SingletonMixin style instead. I hate having to call CLASS.instance() every time. Look into it again. It works now, but seems silly. Further, there are some classes (shared.ConnectionManager, in particular) that are still using the Singleton metaclass.

- Shibboleth integration for login

- Better input abilities for the web interface, e.g., selecting locations from a map, rather than from a dropdown

- Add SDX capabilities

- Add L2 learning switch (prereq for SDX)

- How to handle tables better in the ??? RuleManager? SDXController? I'm thinking RuleManager, as they control where things are going.

- Bootstrapping the OF tables. For instance, there's only one as of this checkin, but there's no proper fallthrough to the next table for SDX capabilities. Local Controller's responsibility?

- Logging update - Most code needs to actually use the logger functionality that's built in.

- Lots of things need __str__() and __repr__() functions either created or updated

- Bandwidth reservation - How to do this? Look at OF1.3 spec.

- Better abstraction between SDX and Local controllers. Right now, it's very close to OpenFlow. If it was abstracted better, writing the UserPolicy children would be much easier. It would require more work on the Local Controllers, but that's not the end of the world. This is a non-trivial design challenge. Match-Action makes some sense, but so does "connect ports 3 and 6 together on VLAN 17". 

- East/West interfaces as a pair of Northbound/southbound interfaces. See NSI, below.

- Integrate with NSI at both the top and bottom. Will likely need a northbound adapter to talk with the REST API.

- What to do if someone's priviledges change? What happens to their existing rules? How to trigger a recalculation of rule? What about recurring rules?

- Tests need to be updated: regressions haven't been performed, so there are a lot of outdated tests still kicking around.

- Replace cPickle with something more secure.


TOPOLOGY MANAGER

- Extend TopologyManager to handle different types of objects, DTNs for instance. These should be able to be added from the REST API: There's a DTN off of the mia switch on port 6, with name "FIU DTN" and max bandwidth of 100Mbps.

- TopologyManager needs to have a proper database. Use https://dataset.readthedocs.io/en/latest/, as it's being used by the RuleManager now. Base any changes on RuleManager changes.

- Updating topology in real time. Topology Manager needs calls that can be made to add and remove nodes and links, and change properties on links. Needs a DB for this first.

- Upon property changes (think of a LAG losing one connection), need to be able to call registered listeners (e.g., RuleManager) about a property change (bandwidth of a link, in this example). Need registration for callback capabilities as well as calling the callbacks themselves.

- What other properties are useful for the Topology nodes and links?


RULE MANAGER

- Needs some sort of tracking mechanism for recurrant rules. This may be related to the states discussed above.

- Need to handle constraints (bandwidth, for instance). Need to handle adjusting constraints as well! 


SDX-LC INTERFACE CHANGES

Parent class:
LCRule 		- This is the local controller rule. Simple parent class.
 - cookie		- This is a tracking numberI

Children:
VlanLCRule	- Handles all NSI-style rules
- inport		- Physical in port
- outport		- Physical out port
- vlan_in		- VLAN coming from the inport (for matching/setting)
- vlan_out	- VLAN go to the outport
- bidirectional	- Boolean, likely True, but there are cases where a path is unidirectional

SDXLCRule	- Everything else, for now. This will likely need to be extended
- match		- List of fields to match
- action		- List of actions to take
- ingress		- Boolean, True if an Ingress rule, False if egress rule


The VlanLCRule class is pretty simple: there's nothing unsurprising in the fields there. There will likely be some restrictions on the VLANs that can be used. This may need to be converted into some other encapsulation protocol (MPLS, for instance) in the future, and possible have something that converts one encapsulation protocol to another (e.g., VLANs at the endpoints, MPLS through the middle). 

SDXLCRule has too many capital letters. The ingress boolean should be reasonably straight forward: it basically selects which table to put it in (in a multi-table LC). The match and action fields are far more interesting, and challenging. These will need a class hierarchy of their own, not dissimilar to the OF fields that I've already created (perhaps ripped off of those classes....).

Matches should have full OF capabilities, at a minimum. They may not have all the details that a match would have, but they will need to be able to manipulate based on headers. Remember, the User-level interface will be more abstract, so having a semi-abstract interface at this layer is reasonable.

Actions - Fwd, modify headers, add headers (encapsulation headers, like VLANs and MPLS). The usual.



The VlanLCRule is optionally bidirectional, while SDXLCRules are necessarily unidirectional as you are only able to control your own traffic.

Translation at the Local controller is reasonably easy, assuming you can support multiple tables (with single table, there's the mess of cross multiplication), but more difficult than it currently is. There should be some abstraction here, but not the level that the users should be experiencing. 



TABLE Allocations

Right now, I'm waffling between 3 and 4 tables being used. Below are the responsibilities that I see, but there are some embedded questions. This is only somewhat related to the interface question, but does inform what the interfaces are responsible for.

Table 0 
- REN/VLAN fowarding
- For boring non-SDX style rules
- Can directly forward to an outbound port
- Fall through to table 1


Table 1 
- Egress rules - any modifications to packets exiting a network go here
- Any modification rule MUST send flow to Table 2 after
- Fall through two table 2 (any packets that don't have Egress rules associated


Table 2
- Ingress rules
- Should this be keyed off of IPs or MACs? Something else?
- How to handle spanning tree/learning switch functionality?

Table 3
- Forwarding based on learning switch (either L2 or L3) or pre-programmed forwarding 
- Should this be part of Table 2?